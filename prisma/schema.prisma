datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId

  firstName          String?
  lastName          String?
  clerkUserId          String   @unique
  email         String         @unique
  imageUrl         String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role Role @default(USER)

  orders        Order[]
  reviews       Review[]
  products      Product[]
}

model Order{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  amount Float
  currency String
  status String
  deliveryStatus String?
  paymentIntentId String @unique
  products CartProductType[]
  address Address?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  description String?
  category String
  images Image[]
  prices Price[]
  inStock Boolean
  shape String?
  length String?
  size String @default("One Size")
  reviews Review[]
  inventory Int @default(1)
  userId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Review{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  productId String @db.ObjectId
  rating Int
  comment String
  images Image[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type CartProductType {
	id String
	name String
	description String?
	category String
	selectedImg Image
	quantity Int
	price Price
  shape String?
  length String?
  size String @default("One Size")
}

type Image {
  color String
  colorCode String
  image String
}

type Address {
  city String
  country String
  line1 String
  line2 String?
  postalCode String
  state String
}

type Price {
  price Float
  quantity Int
  unit String
}

enum Role{
  USER
  ADMIN
}